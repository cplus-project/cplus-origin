/**
 * Copyright 2015 JiKai. All rights reserved.
 * Use of this source code is governed by a BSD-style
 * license that can be found in the LICENSE file.
 *
 *     This file defines some common typedefs, offers
 * the uniform error handling and memory operations.
 **/

#ifndef CPLUS_COMMON_H
#define CPLUS_COMMON_H

#include "config.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <assert.h>
#include <malloc.h>

#define true   1
#define false -1
typedef char                   bool;
typedef char                   byte;
typedef char                   int8;
typedef short                  int16;
typedef int                    int32;
typedef long long int          int64;
typedef unsigned char          uint8;
typedef unsigned short         uint16;
typedef unsigned int           uint32;
typedef unsigned long long int uint64;
typedef float                  float32;
typedef double                 float64;
typedef unsigned char          uchar;

// all error in this compiler program will be generated by
// new_error(char* errmsg).
//
// when you define a function witch may generate some error,
// you should write the definition like below:
//    error foo(bool flag) {...}
//
// when you call the function and want to check the error,
// you can judge like this:
// return value ->     NULL means none error occurs
//                 not NULL means some error occurs
//
// if the error's address value is a negative number, it will
// be used to represent an error code.
// example:
//    #define ERR_INPUT_EOF  -1
//    #define ERR_INPUT_FAIL -2
//    ...
//    error err = NEW_ERROR_CODE(ERR_INPUT_EOF);
//    if (err != NULL) {
//        switch (ERROR_CODE(err)) {
//        case ERR_INPUT_EOF:  ...; break;
//        case ERR_INPUT_FAIL: ...; break;
//        }
//    }
//    ...
typedef char* error;
extern error new_error(char* errmsg);

#define NEW_ERROR_CODE(code) (error)code
#define ERROR_CODE(err)      (int64)err

// all operations about memory allocating/releasing must use
// the function mem_alloc and mem_free. mem_alloc can process
// the error automatically. mem_free will work well even
// though you free the same memory many times.
extern void* mem_alloc(size_t size);
extern void  mem_free (void *ptr);

// other functions to debug the program.
extern void  debug(char* msg);
extern void  fatal(char* msg);

#endif
